import React, { useState } from "react";
import "./rotation.scss";
import Ads from "../../components/ads/Ads";

const WheelOfFortune = () => {
  const [currentRotate, setCurrentRotate] = useState(0);
  const [isRotating, setIsRotating] = useState(false);
  const [msg, setMsg] = useState("");

  const timeRotate = 7000; // 7 seconds
  const listGift = [
    {
      text: "Quà 1",
      percent: 10 / 100,
    },
    { text: "Quà 2", percent: 10 / 100 },
    { text: "Quà 3", percent: 5 / 100 },
    { text: "Quà 4", percent: 5 / 100 },
    { text: "Quà 5", percent: 5 / 100 },
    { text: "Quà 6", percent: 40 / 100 },
    // { text: "Khóa học js free", percent: 10 / 100 },
    // { text: "Áo khoác Gucci", percent: 20 / 100 },
  ];

  const size = listGift.length;
  const rotate = 360 / size;
  const skewY = 90 - rotate;

  const start = () => {
    setMsg("");
    setIsRotating(true);
    const random = Math.random();
    const gift = getGift(random);
    setCurrentRotate((prevRotate) => prevRotate + 360 * 10);
    rotateWheel(currentRotate, gift.index);
    showGift(gift);
  };

  const rotateWheel = (currentRotate, index) => {
    document.querySelector(".wheel__lucky").style.transform = `rotate(${
      currentRotate - index * rotate - rotate / 2
    }deg)`;
  };

  const getGift = (randomNumber) => {
    let currentPercent = 0;
    let list = [];
    listGift.forEach((item, index) => {
      currentPercent += item.percent;
      if (randomNumber <= currentPercent) {
        list.push({ ...item, index });
      }
    });
    return list[0];
  };

  const showGift = (gift) => {
    setTimeout(() => {
      setIsRotating(false);
      setMsg(`Chúc mừng bạn đã nhận được "${gift.text}"`);
    }, timeRotate);
  };

  return (
    <>
      <div
        style={{
          display: "flex",
        }}
      >
        <div className="SidbarGame"></div>
        <main className="wheel-page">
          <h3>Vòng Quay May Mắnn</h3>
          <section className="wheel">
            <span className="wheel__arrow">
              <ul className="wheel__lucky">
                {listGift.map((item, index) => (
                  <li
                    key={index}
                    className="wheel__segment"
                    style={{
                      transform: `rotate(${
                        rotate * index
                      }deg) skewY(-${skewY}deg)`,
                    }}
                  >
                    <p
                      className={`wheel__text ${
                        index % 2 === 0 ? "wheel__text-1" : "wheel__text-2"
                      }`}
                      style={{
                        transform: `skewY(${skewY}deg) rotate(${
                          rotate / 2
                        }deg)`,
                      }}
                    >
                      <b>{item.text}</b>
                    </p>
                  </li>
                ))}
              </ul>
            </span>
          </section>
          <section className="wheel__info">
            <div className="wheel__desc">
              <div>1 lượt quay bằng 30 điểm</div>
              <p>Bạn có 12 lượt quay</p>
            </div>
            <div className="wheel__btn-wrapper">
              <button
                className="wheel__btn"
                onClick={() => !isRotating && start()}
              >
                QUAY
              </button>
            </div>
            <div className="wheel__mission">
              <p>
                Nhận thêm điểm <br /> bằng cách làm nhiệm vụ
              </p>
              <button className="wheel__btn--mission">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 16 16"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    fill-rule="evenodd"
                    clip-rule="evenodd"
                    d="M6.21 5.056C8.13 2.58867 11.13 1 14.5 1C14.6326 1 14.7598 1.05268 14.8536 1.14645C14.9473 1.24021 15 1.36739 15 1.5C15 4.87067 13.4113 7.87 10.944 9.79067C11.0466 10.4335 11.0085 11.0909 10.8324 11.7176C10.6563 12.3443 10.3463 12.9253 9.92377 13.4205C9.50129 13.9158 8.97639 14.3135 8.38529 14.5862C7.79419 14.8588 7.15097 15 6.5 15C6.36739 15 6.24022 14.9473 6.14645 14.8536C6.05268 14.7598 6 14.6326 6 14.5V11.746C5.35195 11.2342 4.76617 10.6482 4.25467 10H1.5C1.36739 10 1.24021 9.94732 1.14645 9.85355C1.05268 9.75979 1 9.63261 1 9.5C0.999947 8.84897 1.14116 8.20568 1.41388 7.61453C1.68661 7.02337 2.08435 6.49843 2.57967 6.07594C3.07499 5.65345 3.65608 5.34346 4.28285 5.16737C4.90961 4.99128 5.56712 4.95328 6.21 5.056ZM10 4.5C9.60218 4.5 9.22064 4.65804 8.93934 4.93934C8.65804 5.22064 8.5 5.60218 8.5 6C8.5 6.39782 8.65804 6.77936 8.93934 7.06066C9.22064 7.34196 9.60218 7.5 10 7.5C10.3978 7.5 10.7794 7.34196 11.0607 7.06066C11.342 6.77936 11.5 6.39782 11.5 6C11.5 5.60218 11.342 5.22064 11.0607 4.93934C10.7794 4.65804 10.3978 4.5 10 4.5Z"
                    fill="white"
                  />
                  <path
                    d="M3.50718 11.495C3.55984 11.4557 3.60425 11.4064 3.63788 11.35C3.6715 11.2936 3.69368 11.2311 3.70315 11.1661C3.71263 11.1011 3.7092 11.0348 3.69308 10.9712C3.67695 10.9075 3.64844 10.8476 3.60918 10.795C3.56991 10.7423 3.52066 10.6979 3.46423 10.6643C3.4078 10.6306 3.3453 10.6084 3.2803 10.599C3.2153 10.5895 3.14907 10.5929 3.0854 10.6091C3.02172 10.6252 2.96184 10.6537 2.90918 10.693C2.39777 11.0734 2.00012 11.5864 1.75923 12.1765C1.51835 12.7666 1.44341 13.4113 1.54251 14.041C1.55863 14.1458 1.60769 14.2428 1.68259 14.318C1.7575 14.3931 1.85436 14.4425 1.95918 14.459C2.58887 14.558 3.23365 14.4829 3.82376 14.2419C4.41387 14.0009 4.92685 13.6031 5.30718 13.0916C5.34771 13.0391 5.37738 12.979 5.39447 12.9149C5.41156 12.8508 5.41572 12.784 5.40671 12.7182C5.3977 12.6525 5.3757 12.5892 5.342 12.5321C5.30829 12.475 5.26355 12.4251 5.21038 12.3854C5.15721 12.3458 5.09668 12.3171 5.03231 12.301C4.96794 12.285 4.90102 12.2819 4.83545 12.2919C4.76988 12.302 4.70697 12.325 4.65038 12.3597C4.59379 12.3943 4.54466 12.4398 4.50585 12.4936C4.27336 12.8063 3.9709 13.0602 3.62267 13.235C3.27445 13.4098 2.89015 13.5007 2.50051 13.5003C2.50051 12.6803 2.89518 11.9516 3.50718 11.495Z"
                    fill="white"
                  />
                </svg>
                Nhiệm vụ
              </button>
            </div>
          </section>
          <div className="wheel__gift">
            <h4>Quà bạn nhận được</h4>
            <ul>
              {listGift.map((item, index) => (
                <li key={index}>
                  <div className="wheel__gift-item">
                    <svg
                      width="51"
                      height="51"
                      viewBox="0 0 51 51"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <g clip-path="url(#clip0_1609_6923)">
                        <path
                          d="M12.5507 -0.000621289C12.6838 -0.000621289 12.8169 -0.000621289 12.9486 -0.000621289C13.0098 0.0220199 13.071 0.0593113 13.1336 0.0633068C14.8355 0.171186 16.238 0.913018 17.4582 2.06772C18.2779 2.84285 19.1242 3.58868 19.9598 4.34649C20.5706 4.90054 21.184 5.45058 21.8134 6.01928C22.85 4.95115 24.0755 4.39444 25.522 4.3971C26.9657 4.39977 28.1779 4.98577 29.1906 6.00995C30.7155 4.62751 32.2058 3.28369 33.6855 1.92921C34.5571 1.13144 35.5325 0.526786 36.6875 0.2471C37.1346 0.139222 37.595 0.0792889 38.0487 -0.00195312C38.1818 -0.00195312 38.3149 -0.00195312 38.4466 -0.00195312C38.6249 0.0286791 38.8032 0.0726297 38.9829 0.0886117C42.5277 0.400261 45.2848 3.73118 44.8497 7.26721C44.7393 8.16753 44.392 9.03722 44.1458 9.95086C45.2396 9.95086 46.4119 9.94287 47.5842 9.95219C49.5868 9.9695 50.9867 11.3773 50.996 13.3843C51.0027 14.88 50.9973 16.3743 50.9973 17.87C50.9973 19.3336 50.4052 19.9303 48.9521 19.9303C33.3342 19.9303 17.7177 19.925 2.09977 19.9423C1.08049 19.9436 0.371253 19.6093 0 18.6424C0 16.6487 0 14.6549 0 12.6611C0.0319357 12.6065 0.0758473 12.5559 0.0931458 12.496C0.581496 10.8525 1.75114 9.96285 3.45438 9.95219C4.46435 9.94553 5.47564 9.95219 6.48561 9.94953C6.63864 9.94953 6.79166 9.93355 6.98461 9.92156C6.92073 9.78571 6.8888 9.71113 6.85154 9.63921C5.12169 6.31628 6.43505 2.30878 9.84152 0.734552C10.6798 0.34832 11.6446 0.237777 12.5507 -0.000621289ZM20.4482 9.95086C20.5027 9.90158 20.5573 9.85363 20.6132 9.80436C20.4641 9.54598 20.3377 9.27029 20.1607 9.03322C20.025 8.85076 19.8254 8.71491 19.6538 8.55909C18.0304 7.09007 16.4349 5.5891 14.7769 4.16137C12.9286 2.56849 10.0571 3.5394 9.49954 5.89941C9.00454 7.99572 10.5587 9.91889 12.7956 9.94553C14.6518 9.96684 16.5094 9.95086 18.367 9.95086C19.0603 9.95086 19.7549 9.95086 20.4482 9.95086ZM30.3842 9.80303C30.4374 9.84564 30.4906 9.88959 30.5438 9.93221C30.641 9.93754 30.7395 9.94953 30.8366 9.94953C33.2411 9.95086 35.6456 9.95219 38.0501 9.94686C38.3135 9.94553 38.5797 9.91224 38.8405 9.86562C40.1485 9.63255 41.2303 8.6057 41.5058 7.34845C41.7919 6.04458 41.2503 4.6941 40.1445 3.95493C38.7952 3.05195 37.245 3.2091 35.9117 4.40776C34.2098 5.93804 32.5132 7.47497 30.8326 9.03056C30.6237 9.22368 30.5305 9.54198 30.3842 9.80303Z"
                          fill="#E1E1E1"
                        />
                        <path
                          d="M3.34708 23.2715C9.62378 23.2715 15.8592 23.2715 22.1373 23.2715C22.1373 32.4891 22.1373 41.6988 22.1373 50.971C21.9749 50.9803 21.7993 50.9977 21.6236 50.9977C16.7268 50.999 11.8313 51.0016 6.93453 50.9977C4.70834 50.9963 3.32047 49.6165 3.32047 47.399C3.31648 39.5252 3.31914 31.6501 3.32047 23.7763C3.32047 23.6164 3.33777 23.4553 3.34708 23.2715Z"
                          fill="#E1E1E1"
                        />
                        <path
                          d="M28.8457 50.9741C28.8457 41.7099 28.8457 32.5122 28.8457 23.2812C35.1184 23.2812 41.3645 23.2812 47.6785 23.2812C47.6785 23.4757 47.6785 23.6528 47.6785 23.83C47.6785 31.6705 47.6798 39.5123 47.6771 47.3529C47.6758 49.6196 46.3105 50.9968 44.0591 50.9981C39.1623 51.0021 34.2668 50.9994 29.37 50.9981C29.209 50.9994 29.0466 50.9834 28.8457 50.9741Z"
                          fill="#E1E1E1"
                        />
                      </g>
                      <defs>
                        <clipPath id="clip0_1609_6923">
                          <rect width="51" height="51" fill="white" />
                        </clipPath>
                      </defs>
                    </svg>
                  </div>
                  <p>{item.text}</p>
                </li>
              ))}
            </ul>
          </div>
          <h1 className="wheel__msg">{msg}</h1>
        </main>
        <div className="SidbarRule"></div>
      </div>
    </>
  );
};

export default WheelOfFortune;
